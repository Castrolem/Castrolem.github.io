<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luis Castro</title>
    <description>I&#39;m a Full-Stack Developer and computer engineer currently traveling the world. In my work, I combine 3 basic principles User Experience, Beauty and Purpose. I have 5+ years doing Software Development and have completed more than 17 projects (managed 4 of them) in 2 continents. I make webapps that work fast, are easy to use, persuasive, relevant to the customer and fit in the business environment.</description>
    <link>http://luiscastro.co/</link>
    <atom:link href="http://luiscastro.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 11 Feb 2016 10:24:10 +0100</pubDate>
    <lastBuildDate>Thu, 11 Feb 2016 10:24:10 +0100</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>The path to a living Style-guide for RealScout</title>
        <description>&lt;h2 id=&quot;a-not-so-long-time-ago&quot;&gt;A not so long time ago&lt;/h2&gt;
&lt;p&gt;In a repo far far into the cloud. We started by creating a complex application that was huge, and with every project that starts small, it didn’t had much scope for it’s CSS, which it can get really cumbersome for newcomers to work with.&lt;/p&gt;

&lt;p&gt;To start talking about why we decided to change our approach to the structure of our project, we’ll have to talk about first of how CSS it’s considered usually.&lt;/p&gt;

&lt;p&gt;CSS is a language that can be beautiful to write in, but it’s really complex to do because it does not support the Object Oriented Design that we developers are used to. And that’s where SASS comes to the rescue. It’s 2016, if you are not using some kind of pre-processor for your medium to big size project, then there’s time you’re probably giving into your stylesheets that can be used in other tasks.&lt;/p&gt;

&lt;h2 id=&quot;basic-design-principles&quot;&gt;Basic design principles&lt;/h2&gt;
&lt;p&gt;Freedom breeds design decisions that are based on particular instances of content and context. On a small sampling of pages, this might not be so bad. But as the number of uniquely art directed pages increases, or as additional designers begin to impose their stylistic discretion, design standardization falls by the wayside. The result is pages that look good on their own, but lack any sense of cohesion as a whole.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Designers believe in freedom and beauty, engineers believe in consistency. The result of combining both perspectives it’s what I call User Experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever grabbed a design book? Basic design principles teaches that everything is inside a GRID, which by itself doesn’t give much freedom but people love GRIDs, and it’s kinda funny when you think that CSS a language engineered for designers as is it right now, doesn’t have GRIDs (read more about the working draft of CSS grids &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Of course there are ways to create your own GRID system, the best way is to do it using floated elements for columns and clearing the &lt;code class=&quot;highlighter-rouge&quot;&gt;floats&lt;/code&gt; in every row. The 2015+ way it’s using &lt;code class=&quot;highlighter-rouge&quot;&gt;flexbox&lt;/code&gt; which solves one of the most difficult tasks in the history of CSS: &lt;strong&gt;centering stuff&lt;/strong&gt;, which is great but it’s not supported by most of the browsers and sometimes you need to have all of this features prefixed.&lt;/p&gt;

&lt;p&gt;Just like pre-processors are great, there are tools like &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;, which is a post-processor that will read your compiled stylesheet and add all of the prefixes necessary to make your CSS work in the latest 2 versions of each browser (You can change this configuration)&lt;/p&gt;

&lt;p&gt;All this technologies are outside the W3C, but will make your SASS code work follow what this standards say, if you write the code the way it should, which lead us to the big question in the design process: &lt;em&gt;How to write good CSS?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;structuring-a-consistent-experience&quot;&gt;Structuring a consistent experience&lt;/h2&gt;

&lt;p&gt;Since CSS by itself is not that great and we have already talked about SASS letting us make OOD code, we can say that the next step for making a great design is to have a consistent experience.&lt;/p&gt;

&lt;p&gt;With the supplied designs of course and with the mindset to write DRY code. After long sessions of investigation we decided that going with a structure similar to what Brad Frost - &lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Atomic Design&lt;/a&gt; says about the web.&lt;/p&gt;

&lt;p&gt;So how can you scope a project based on components rather than pages with the designs supplied by your design team?&lt;/p&gt;

&lt;p&gt;We though the best place was to start creating an interface inventory, which is a comprehensive collection of the bits and pieces that make up your interface.&lt;/p&gt;

&lt;p&gt;Designs tend to be pixel perfect, so I think this is the best process you can do with your designer to start creating components that breath and are consistent.&lt;/p&gt;

&lt;p&gt;Tackling a project this size required us to start small, beginning with typography settings, headings and links with real code, will let you optimize and test in every browser how the type font will look in the real life. This is an important step, the typography of your web application will dictate the size of your components.&lt;/p&gt;

&lt;p&gt;After we created all this components, that of course will replace the agent supplied styles of every browser, we had to start deciding on the actual folder structure of our project. Like I stated before, we we’re heavily inspired by the concepts of Atomic Design, so we created the following folders.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;├── components
├── helpers
├── layouts
├── objects
└── settings&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each one contains a main file that include all the partial views in it and then each &lt;code class=&quot;highlighter-rouge&quot;&gt;_main_partial.scss&lt;/code&gt; file it’s included by a main.scss which will be compiled later by our asset pipeline (Another story).&lt;/p&gt;

&lt;h3 id=&quot;settings&quot;&gt;Settings&lt;/h3&gt;
&lt;p&gt;With all the typography work done, we created our settings folder, the chosen one to hold all our variables and constants of our site.&lt;/p&gt;

&lt;p&gt;Our variables are divided by
- Typography: The baseline of our styles is set to a &lt;code class=&quot;highlighter-rouge&quot;&gt;font-size&lt;/code&gt; in the document of &lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt;, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;$primary—font-family: “Helvetica Neue”&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;$secondary—font-family: “Montserrat”&lt;/code&gt; (both with all the fallbacks necessary to avoid &lt;a href=&quot;http://www.paulirish.com/2009/fighting-the-font-face-fout/&quot;&gt;FOUT&lt;/a&gt;).
- Colors: The file that every designer will love to see first, contains all the HEX codes with correspondent names. We suggest to add a unique name to your HEX codes and then create variables that will say the type of color that it is. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;$blue-da-france: #0CAAF4;&lt;/code&gt; it’s our main tone of blue and the base color for most of the things in the Agents application, so we have a variable that’s easier to read and correspond the role of the color &lt;code class=&quot;highlighter-rouge&quot;&gt;$base: $blue-da-france;&lt;/code&gt;. Say you want to move from blue to red, then you only need to change this, &lt;em&gt;voilà&lt;/em&gt;.
- Sizes: Holds all the standard measures for margins and paddings that we can use in our application, between standard sizes to use when creating new components to the setup of some global components like our &lt;code class=&quot;highlighter-rouge&quot;&gt;box&lt;/code&gt; style.
- Index: This file it’s one of the most interesting ones of our settings, it holds a SASS array of strings, each one it’s a name for a component or object that we know will have a &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt; that’s not static in our stylesheet, depending on the position of the string in the array, it’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt; that we’ll get compiled into the element, by doing this we avoided the terrifying situation of not knowing a bigger number for an element that needs to be in front of our fixed navigation component.
- Box model: have you ever worked without making all your elements have &lt;code class=&quot;highlighter-rouge&quot;&gt;box-sizing: border-box;&lt;/code&gt;. We have, in this file we set a couple helpers to define different box-sizing ways for our elements.&lt;/p&gt;

&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;
&lt;p&gt;Each of the small snippets of code that are re-usable and independent of where they will be put. For example &lt;code class=&quot;highlighter-rouge&quot;&gt;buttons&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;inputs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;iconography&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;It’s the second section to tackle when making a style-guide, and one of the most important steps, if you did your job at the interface inventory, then this items should be immutable to achieve consistency.&lt;/p&gt;

&lt;p&gt;For example, this is how part of our SASS looks like for our different buttons.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;.button {
  background-color: $base;
  border: 1px solid $base;
	color: currentColor;

  $button:  (“orange”, $orange),
            (“green”, $green),
            (“red”, $red),
            (“pink”, $pink),
            (“error”, $error),
            (“valid”, $valid);

  &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;:not([disabled]) {
    color: white;

    @each $name, $color in $button {
      &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;.#{$name} {
        background-color: $color;
        border-color: $color;

        &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;:focus,
        &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;:hover {
          $hover—color: darken($color, 10%);
          border-color: $hover—color;
          background-color: $hover—color;
        }
      }
    }
  }

  &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;[disabled] {
    color: rgba($black, .5);
    background-color: rgba($black, .1);
    border-color: rgba($black, .1);
    cursor: not-allowed;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The big things to notice here are, we have a set of different buttons that we want to create, which are color dependent (&lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;orange&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pink&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;) or situational (&lt;code class=&quot;highlighter-rouge&quot;&gt;valid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;). To do this, there’s a SASS loop that will create consistent styles for each of the types of buttons that we need.&lt;/p&gt;

&lt;p&gt;But wait, why are you negating in this buttons disabled? Well, we like a lot the HTML5 disabled syntax, and it’s really easy to use with most JavaScript frameworks nowadays. So for our CSS we didn’t like the idea of having to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.disabled&lt;/code&gt; class that overrides the styles of the elements. If a button is disabled, none of the styles will apply to it which means that the browser will render a disabled button faster to the user.&lt;/p&gt;

&lt;h3 id=&quot;layouts&quot;&gt;Layouts&lt;/h3&gt;
&lt;p&gt;Remember those famous GRIDs? Well, for our styles, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;clearfix&lt;/code&gt; one that can be set with &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tablet&lt;/code&gt; and sizes, the first two are modifiers to the sizes, which override the styles for certain resolutions between a &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt; size. This simplifies things a lot because we say that every devices between &lt;code class=&quot;highlighter-rouge&quot;&gt;47.50em&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;60.00em&lt;/code&gt; is going to be a tablet, but since we’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;ems&lt;/code&gt; here, if a user in a desktop browser zooms into the UI, it won’t break at all, it will just display the tablet UI with bigger fonts.&lt;/p&gt;

&lt;p&gt;But hey, we also talked about how cool is flexbox for centering, well, we didn’t forget about it, in our grid, if any developer adds the class &lt;code class=&quot;highlighter-rouge&quot;&gt;.flex&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;.row&lt;/code&gt;, the columns become easy to modify with every flexbox alignment property you can imagine and this will also work with different resolutions, how cool is that?&lt;/p&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;p&gt;Are the part that can be hard to explain sometimes, we call components all the elements that can contain objects and are displayed in a certain way always, so they would have to have a layout set and more than one object to be called a component.&lt;/p&gt;

&lt;p&gt;Some of the components are also immutable, like the pagination or tabs component, both include &lt;code class=&quot;highlighter-rouge&quot;&gt;buttons&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt; and a layout that is specific, we don’t want developers to change this component unless there’s a significant change in the design department. So our solution to this was to set up a sub-folder called immutable that contains this type of element.&lt;/p&gt;

&lt;p&gt;Outside of this folder, you can find the elements that can change depending on new features or layout decisions. For example, we call everything that our agents see the &lt;em&gt;“pro side”&lt;/em&gt; of the application, so every &lt;em&gt;”pro”&lt;/em&gt; component can be changed by feature decisions without affecting the homebuyer side of the application that has similar or equal elements.&lt;/p&gt;

&lt;h2 id=&quot;the-future-is-uncertain-but-controlled&quot;&gt;The future is uncertain but controlled&lt;/h2&gt;
&lt;p&gt;Great, you have everything done, but what about future elements that other developers will create without your mentorship, will they follow the work that you have done in the style-guide elements?&lt;/p&gt;

&lt;p&gt;Well, this is a really hard thing to answer, but for us, we can say that after deciding on the way of writing code, which is using the &lt;strong&gt;BEM&lt;/strong&gt; methodology and you can read more about it &lt;a href=&quot;https://en.bem.info/method/&quot;&gt;here&lt;/a&gt;, we now write more HTML than CSS, we can set up templates for new features without having to write anything in our components, which mean we have achieved an optimal level of consistency and our selectors do are not nested more than 1 level for objects and 3 levels for components (read more about &lt;a href=&quot;http://thesassway.com/intermediate/avoid-nested-selectors-for-more-modular-css&quot;&gt;nesting&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After you have your Style-guide finished. If you are writing more lines of CSS than HTML, then there’s something wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s the philosophy to live by and here at RealScout we’re sure that our application will grow and become better for our user base with a streamlined and consistent UI.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2016 18:29:12 +0100</pubDate>
        <link>http://luiscastro.co/2016/01/27/the-path-to-a-living-style-guide.html</link>
        <guid isPermaLink="true">http://luiscastro.co/2016/01/27/the-path-to-a-living-style-guide.html</guid>
        
        <category>RealScout</category>
        
        
      </item>
    
      <item>
        <title>The traveler dev</title>
        <description>&lt;p&gt;Luck, it’s a word that sometimes defines a lot in peoples life, I have been very lucky to have the opportunity of do what I love, which is create different web applications from anywhere in the world. All that I need is my laptop, an internet connection faster than 4MBps and lots of beverages/food and for that I’m grateful.&lt;/p&gt;

&lt;p&gt;It all started in Venezuela while I founded with a friend a web design agency, we were both working at the beginning from our houses since we didn’t have a formal office, but we did growth our online presence by a big margin just doing key projects for people that we knew at the time.&lt;/p&gt;

&lt;p&gt;He moved out to Mexico and we continued working without any problems, at that point I realized that I was missing part of the fun, we could do the same while both traveled the world, maybe we didn’t travel together, but at least each one of us would have the opportunity to do it.&lt;/p&gt;

&lt;h2 id=&quot;my-first-work-trip&quot;&gt;My first work trip&lt;/h2&gt;
&lt;p&gt;One of our coolest clients (and now the company that I’m working for) offered me to go to Silicon Valley for a short trip, it was a great opportunity, I packed all the important things that I wanted to show about my country to the guys at the office and 2 weeks later, I was traveling from Caracas to San Francisco.&lt;/p&gt;

&lt;p&gt;I have to say, it was great, I had plenty of visits to the US East coast and this was my first time seeing the West coast, it’s so different, people in this area are more stylish and at the same time true to themselves and what they believe, it’s all about do what makes you and others feel better. At least that was the perception it gave me and after those 2 weeks and half of working and hanging out with everyone I can say that I found great friends.&lt;/p&gt;

&lt;h2 id=&quot;working-remotely&quot;&gt;Working remotely&lt;/h2&gt;
&lt;p&gt;One of the cool things about being Venezuelan, is that most of the people in my country have multiple nationalities, since our parents came from Europe after the wars or periods of dictators, they were outcasts of their societies, traveling to the new world for opportunities that their countries couldn’t offer.&lt;/p&gt;

&lt;p&gt;Most of them had great ideas and when they got to this country, nothing was done yet, so they were the pioneers, it gave plenty of opportunities to my generation to do what we wanted, we studied what our minds needed, not what others requested.&lt;/p&gt;

&lt;p&gt;In my case, my Spanish nationality was a great opportunity for me to go to Spain and set it as my base station to travel to other european countries in my free time. My goals are to meet 4-5 new countries per year, to do it sometimes I will just have to work from those countries.&lt;/p&gt;

&lt;p&gt;It has been amazing to do it, my team is very supportive and we they actually like a lot having someone in a different timezone checking out stories in the queue and delivering bug fixes, I feel that this way we are making our product better for our customers faster actually and also we are making our product managers more busy.&lt;/p&gt;

&lt;h2 id=&quot;a-friend-in-each-country&quot;&gt;A friend in each country&lt;/h2&gt;
&lt;p&gt;I won’t touch much on the current situation of Venezuela, but let’s just say that it’s not the best and plenty of people decided that it was better to just use their double nationality advantage and go to those countries to find better opportunities.&lt;/p&gt;

&lt;p&gt;This has impacted a lot in my life, almost all of my friends are now living in different countries and it’s making my trips a lot better, it’s just not about meeting a new country, it’s about hanging out with my friends and living the life of that country as a local.&lt;/p&gt;

&lt;p&gt;Working from it, breathing the night life and the culture without being an outsider makes everything better. Tourist countries treat their tourists in a different manner and sometimes it’s just not the best, so if you know someone where you are going, ask to that person if they can show you the places where they usually go.&lt;/p&gt;

&lt;p&gt;The places I have gone while working are: Aruba, Saint Marteen, Trinidad &amp;amp; Tobago, Curacao, USA (Florida, Las vegas, Houston, Silicon Valley), Spain, Italy and France.&lt;/p&gt;

&lt;p&gt;My take away in this last 2 years of working from different places is live to meet new experiences.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 14:23:00 +0100</pubDate>
        <link>http://luiscastro.co/2015/12/19/the-traveler-dev.html</link>
        <guid isPermaLink="true">http://luiscastro.co/2015/12/19/the-traveler-dev.html</guid>
        
        <category>Development,</category>
        
        <category>traveler,</category>
        
        <category>Working</category>
        
        <category>remotely</category>
        
        
      </item>
    
      <item>
        <title>My experiences with Atom Editor</title>
        <description>&lt;h2 id=&quot;the-best-front-end-editor-you-will-find-right-now&quot;&gt;The best Front-end Editor you will find right now&lt;/h2&gt;
&lt;p&gt;Not to long ago Sublime Text 2 was the best editor for me, because it had everything I needed and introduced a little bit of features that were a plus to use from time to time, the packages in sublime are great but this editor is failing behind of the fresh competition for one reason, an endless amount of time spent in their 3rd version which has been on beta for 2 years by now.&lt;/p&gt;

&lt;p&gt;It seems like crazy to have a product on beta for so long, and a closed beta in fact. Most of the people doesn’t know what this third version brings to the table, since it looks the same, works the same and performs the same as V2.&lt;/p&gt;

&lt;p&gt;I guess that’s why the people at Github felt the need to create a new editor, one that satisfy their needs and the needs of lots of others that work in the same branch. We make web apps for our clients, this is a “it was time to make our on editor” kinda thing.&lt;/p&gt;

&lt;p&gt;They called “Atom” and it’s a perfect name, Atom is just a base layer to the packages that the community driven Github will make for it. In its core, it’s composed of JS, it’s integrated with GIT (No one saw that coming right?).&lt;/p&gt;

&lt;p&gt;Currently in available for free and hopefully it will stay that way, we don’t know how successful it’s going to be yet, what we know is that we’re going to be in the front line to get it. After several days using it… I’m discovering things that I didn’t knew I wanted on a code editor.&lt;/p&gt;

&lt;h2 id=&quot;why-i-love-it&quot;&gt;Why i love it?&lt;/h2&gt;
&lt;p&gt;Atom is a web-based desktop application built on top of NodeJS. This allows developers of the “little things” to use Node/NPM and browser APIs all in one fluid motion. So in short, being web and node based, it’s going to be easier for developers to write plugins for it and extend its core than for other editors. This of course means more features will come for you and me.&lt;/p&gt;

&lt;p&gt;The command palette its almost the same as Sublime Text 2, which was my default editor by choice for any development, you can clearly see where the inspiration from Atom came when you take a look at the commands that you use here and even the package manager resembles the one on Sublime Text with an enhancement on design of course.&lt;/p&gt;

&lt;p&gt;The file switcher, Again, just like Sublime Text’s amazing quick file switch and search, Atom has implemented almost identical functionality. Atom’s keyboard shortcut for this is &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+t&lt;/code&gt;, but Sublime’s keyboard shortcut also works for it: &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+p&lt;/code&gt;. You also can instead just do &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd+b&lt;/code&gt; to search only open files.&lt;/p&gt;

&lt;p&gt;Atom CLI Tool, with it you can open any file or folder with Atom by just typing the following command in your terminal atom &lt;foldername&gt;.&lt;/foldername&gt;&lt;/p&gt;

&lt;p&gt;A markdown live preview tool, this is great, in the past are the days where you wrote markdown and waited to see it in another program or web app to know how it looks.&lt;/p&gt;

&lt;h2 id=&quot;what-could-be-better&quot;&gt;What could be better?&lt;/h2&gt;
&lt;p&gt;Performance it’s just not there when you add multiple plugins, it really slows down things after just 4-5 and that’s why it won’t be the best editor for me until they fix that, but remember it has lots of people contributing to the repository, so there are lots of features and improvements being done as we speak and this project has the upper hand because of it.&lt;/p&gt;

&lt;p&gt;Overall, this is a great application. With GitHub backing it, I could definitely see it taking off more than what it has. I also see the possibility of an &lt;strong&gt;Atom Marketplace&lt;/strong&gt; in our near future with paid packages, I hope they go this route to get founds for the development of future versions, this way they could get more dedicated people to the project.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 19:15:16 +0100</pubDate>
        <link>http://luiscastro.co/2015/03/24/my-experiences-with-atom.html</link>
        <guid isPermaLink="true">http://luiscastro.co/2015/03/24/my-experiences-with-atom.html</guid>
        
        <category>Development,</category>
        
        <category>editors,</category>
        
        <category>atom</category>
        
        <category>editor</category>
        
        
      </item>
    
  </channel>
</rss>
